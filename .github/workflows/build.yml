#
# .github/workflows/build.yml
#
# Copyright 2022 Jens A. Koch.
# SPDX-License-Identifier: MIT
# This file is part of jakoch/wikifolio_universe_converter.
#

name: Build

on:
 - push
 - pull_request
 # You can manually run this workflow.
 - workflow_dispatch

# improve CI concurrency by automatically cancelling outdated jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:

# ---------------------------------------------------------------------------------------

  build-on-windows:

# ---------------------------------------------------------------------------------------

    name: ${{ matrix.config.job_name }}

    # https://github.com/actions/runner-images#available-environments
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2019-Readme.md
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    runs-on: ${{ matrix.config.OS }}

    strategy:
      fail-fast: false
      matrix:
        config:
          # Compiler Versions Overview for Github Actions Windows Images (10-2023)
          # ----------------------------------------------------------------------
          # OS↓ Compiler->| VC    | Clang-Cl | GNU C++ | LLVM Clang
          # --------------|-------|----------|---------|--------------------------
          #  windows-2019 | 16.11 |          | 8.1.0   | 16.0.6
          #  windows-2022 | 17.7  |          | 12.2.0  | 16.0.6
          - { os: windows-2019, preset: "vc16-x64-windows-static-rel-ci", job_name: "Win | VC-16 | Release"        }
          - { os: windows-2022, preset: "vc17-x64-windows-static-rel-ci", job_name: "Win | VC-17 | Release"        }
          - { os: windows-2022, preset: "vc17-x64-windows-static-rdi-ci", job_name: "Win | VC-17 | RelWithDebInfo" }

    env:
      CI: true
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg

    defaults:
      run:
        shell: cmd

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      # https://community.chocolatey.org/packages/ninja
      # https://community.chocolatey.org/packages/ccache
      # https://community.chocolatey.org/packages/cmake
      - name: 🔽 Install Ninja
        run: choco install ninja ccache cmake

      # Build Artifact Name: wiuc-1.0.1-0cda6a2-vc17-static-rdi
      - name: ✏ Fetch Versioning Data & Set Artifact Name
        shell: pwsh
        run: |
          $NAME=$(jq -r .name vcpkg.json)
          $VERSION=$(jq -r .version vcpkg.json)
          $SHORT_HASH=$($env:GITHUB_SHA.substring(0,7))
          $PRESET=$('${{matrix.config.preset}}').replace('-x64-windows', '').replace('-ci', '')
          $ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-$PRESET"
          echo "Artifact Name:" $ARTIFACT_NAME
          echo "ARTIFACT_NAME=$($ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV

      - name: 🛠️ Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      - name: 🔽 Update VCPKG
        run: |
          git clone https://github.com/microsoft/vcpkg ${{ env.VCPKG_ROOT }}
          cd "${{ env.VCPKG_ROOT }}"
          bootstrap-vcpkg.bat -disableMetrics
          vcpkg integrate

      # Reminder: This step requires that the CMakePresets for CI contain
      # "CMAKE_CXX_COMPILER_LAUNCHER": "sccache".
      - name: 🎯 Setup Build Cache
        uses: hendrikmuhs/ccache-action@v1
        with:
          variant: sccache
          key: cache-build-${{ matrix.config.preset }}-${{ github.ref }}
          restore-keys: |
            cache-build-${{ matrix.config.preset }}-${{ github.ref }}
            cache-build-${{ matrix.config.preset }}

      - name: 🎯 Setup VCPKG Cache
        id: cache-vcpkg
        uses: actions/cache@v4 # https://github.com/actions/cache
        with:
          # https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md#configuration
          path: ~\AppData\Local\vcpkg\archives\
          key: cache-win-vcpkg-${{ matrix.config.preset }}-${{ github.ref }}
          restore-keys: |
            cache-vcpkg-${{ matrix.config.preset }}-${{ github.ref }}
            cache-vcpkg-${{ matrix.config.preset }}

      - name: ✏ CMake ➔ Configure
        run: cmake --preset=${{matrix.config.PRESET}}

      - name: 🙏 CMake ➔ Build
        run: cmake --build --preset=${{matrix.config.PRESET}}

      - name: 📦 CMake ➔ Install
        run: cmake --install build --prefix build/wiuc-%VERSION% --verbose

        # dir /S /B vcpkg_installed
        # dir /S /B build\vcpkg_installed\x64-windows-static
      - name: ❔ CHECK important folders, to see if everything is present (after building)
        run: |
          dir /S /B build
          dir /S /B install
          dir /S /B build\${{ matrix.config.preset }}

      - name: 🚥 Prepare Build Artifact (copy to packaging folder and rename)
        run: |
          mkdir artifact
          copy build\${{ matrix.config.preset }}\wiuc.exe artifact\

      - name: 🔼 Upload Build Artifact (on commit)
        uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact/**/*

# ---------------------------------------------------------------------------------------

  build-on-linux:

# ---------------------------------------------------------------------------------------

    name: ${{ matrix.config.job_name }}

    # https://github.com/actions/runner-images#available-environments
    # https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2004-Readme.md
    # https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        # Compiler Versions Overview for Github Actions Linux Images (10-2023)
        # ------------------------------------------------------------------------
        # OS↓ Compiler->| GNU C++                       | LLVM Clang
        # --------------|-------------------------------|-------------------------
        # ubuntu-20.04  | 9.4.0, 10.5.0                 | 10.0.0, 11.0.0, 12.0.0
        # ubuntu-22.04  | 9.5.0, 10.5.0, 11.4.0, 12.3.0 | 13.0.1, 14.0.0
        - { os: ubuntu-20.04, preset: "gcc9-x64-linux-rel-ci",    apt_packages: "g++-9 ninja-build",    job_name: "Linux | GCC-9    | Release" }
        - { os: ubuntu-22.04, preset: "gcc12-x64-linux-rel-ci",   apt_packages: "g++-12 ninja-build",   job_name: "Linux | GCC-12   | Release" }
        - { os: ubuntu-20.04, preset: "clang10-x64-linux-rel-ci", apt_packages: "clang-10 ninja-build", job_name: "Linux | Clang-10 | Release" }
        - { os: ubuntu-22.04, preset: "clang14-x64-linux-rel-ci", apt_packages: "clang-14 ninja-build", job_name: "Linux | Clang-14 | Release" }

    env:
      CI: true
      VCPKG_ROOT: /usr/local/share/vcpkg

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      # Build Artifact Name: wiuc-1.0.1-0cda6a2-clang17-x64-linux-rel
      - name: ✏ Fetch Versioning Data & Set Artifact Name
        run: |
          NAME='wiuc'
          VERSION=$(jq -r .version vcpkg.json)
          SHORT_HASH=`echo $GITHUB_SHA | cut -c1-8`
          PRESET=`echo ${{ matrix.config.preset }} | sed 's/-ci//'`
          ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-$PRESET"
          echo "Artifact Name: $ARTIFACT_NAME"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 🔽 Update Build Environment (update/install packages)
        run: |
          sudo apt update -qq
          sudo apt install ${{ matrix.config.apt_packages }} -y
          ln -s /usr/bin/ninja /usr/bin/ninja-build

      - name: 🔽 Update VCPKG
        run: |
          cd ${{ env.VCPKG_ROOT }}
          git reset --hard
          git pull --quiet
          ./bootstrap-vcpkg.sh -disableMetrics

      # Reminder: This step requires that the CMakePresets for CI contain
      # "CMAKE_CXX_COMPILER_LAUNCHER": "sccache".
      - name: 🎯 Setup Build Cache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: cache-build-${{ matrix.config.preset }}-${{ github.ref }}
          restore-keys: |
            cache-build-${{ matrix.config.preset }}-${{ github.ref }}
            cache-build-${{ matrix.config.preset }}

      - name: 🎯 Cache VCPKG
        id: cache-vcpkg
        uses: actions/cache@v4 # https://github.com/actions/cache
        with:
          # https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md#configuration
          path: /home/runner/.cache/vcpkg/archives/
          key: cache-vcpkg-${{ matrix.config.preset }}-${{ github.ref }}
          restore-keys: |
            cache-vcpkg-${{ matrix.config.preset }}-${{ github.ref }}
            cache-vcpkg-${{ matrix.config.preset }}

      - name: ✏ CMake ➔ Configure
        run: cmake --preset=${{matrix.config.PRESET}}

      - name: 🙏 CMake ➔ Build
        run: cmake --build --preset=${{matrix.config.PRESET}}

      - name: 🚥 Prepare Build Artifact (copy to packaging folder)
        run: |
          mkdir artifact
          cp ../build/wiuc artifact/

      #
      # The uploaded artifact will be a zip file named, e.g. "wiuc-1.0.3-2399e873-Clang14-x64-linux-Release".
      # The binary inside the zip is named "wiuc".
      #
      - name: 🔼 Upload Build Artifact (on every commit)
        if: always()
        uses: actions/upload-artifact@v4 # https://github.com/actions/upload-artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact/**/*

# ---------------------------------------------------------------------------------------

  github-release:

# ---------------------------------------------------------------------------------------

    name: Draft GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-on-windows
      - build-on-linux

    # on tag push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    # Global environment variables
    env:
      TAG: ${{ github.ref_name }}
      # TODO research, if this is needed?
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: 🤘 Checkout repository
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      #  This downloads all artifact zip archives and extracts them into folders.
      #  So we have to zip them for release again.... ¯\_(ツ)_/¯
      #  We are waiting for the "extractArtifact" option, referencing:
      #  # https://github.com/actions/download-artifact/issues/143
      #
      - name: 🔽 Download all artifacts from previous jobs
        uses: actions/download-artifact@v4 # https://github.com/actions/download-artifact
      #   with:
      #     extractArtifact: false # not yet available

      # Then we have a non-working Workaround, which fails with ID not found.
      # Workaround to download all artifact archives (not extracting them!)
      # Filters artifacts by name: must contain "Release" and "zip".
      #- name: 🔽 Download all artifacts from previous jobs
      #  uses: actions/github-script@v6 # https://github.com/actions/script
      #  with:
      #    script: |
      #      // Query: select all artifacts from this workflow
      #      const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        run_id: context.payload.workflow_run.id
      #      });
      #      if(!artifacts) {
      #        console.log(`Could not fetch artifacts from run ID ${context.payload.workflow_run.id}`)
      #        return;
      #      }
      #      console.log(artifacts);
      #      // Query: filter artifacts by name
      #      const matchedArtifacts = artifacts.data.artifacts.filter((artifact) => {
      #        return artifact.name.includes("Release")
      #            && artifact.name.endsWith('zip');
      #      });
      #      console.log(matchedArtifacts);
      #      const fs = require('fs');
      #      matchedArtifacts.forEach(async (artifact) => {
      #        const download = await github.rest.actions.downloadArtifact({
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          artifact_id: artifact.id,
      #          archive_format: 'zip',
      #        });
      #        fs.writeFileSync(`${{ github.workspace }}/${artifact.name}.zip`, Buffer.from(download.data));
      #      });

      - name: Display downloaded files
        run: |
          ls -R

      #- name: Delete all non-release artifacts
      #  run: |
      #    rm -f *-Clang10-*.zip
      #    rm -f *-GCC9-*.zip
      #    rm -f *-VC16-*.zip
      #    ls -R

      - name: Delete all non-release artifact folders
        run: |
          rm -rf *-RelWithDebInfo
          rm -rf *-Clang10-*
          rm -rf *-GCC9-*
          rm -rf *-VC16-*
          ls -R wiuc*

      # zip with -j to only include files of the folder and not the folder itself
      - name: Zip release folders
        run: |
          for dir in ./wiuc*/ ; do zip -jr "${dir%/}.zip" "$dir"; done
          ls -R

      - name: Delete release folders
        run: find . -maxdepth 1 -type d -name 'wiuc*' -exec rm -r {} +

      # The regexp uses named groups for matching:
      # IN   (?P<name>wiuc)-(?P<version>.*)-(?P<commit>.*)-(?P<compiler>.*)-(?P<arch>.*)-(?P<os>.*)-(?:(?P<linktype>[^-]*)-)?Release.zip
      #
      # And only some of the matched groups for building the filename:
      # OUT  $+{name}-$+{version}-$+{compiler}-$+{arch}-$+{os}.zip/
      #
      # wiuc-1.0.4-4f5b959-VC17-x64-windows-static-Release.zip
      # ->
      # wiuc-1.0.4-VC17-x64-windows.zip
      #
      - name: Install rename
        run: sudo apt update && sudo apt install -y rename

      - name: Rename zip files using a named group regexp
        env:
          ARTIFACT_REGEXP: '^(?P<name>wiuc)-(?P<version>[\d.]+)-(?P<commit>[\da-f]+)-(?P<compiler>[A-Za-z\d]+)-(?P<arch>[A-Za-z\d]+)-(?P<os>linux|windows|mac)-?(?P<linktype>static)?-Release\.zip$'
          RELEASE_REGEXP: '$+{name}-$+{version}-$+{compiler}-$+{arch}-$+{os}.zip'
        run: |
          for file in *.zip; do (rename "s/$ARTIFACT_REGEXP/$RELEASE_REGEXP/" "$file"); done
          ls -R

      - name: Extract Release Notes from Changelog
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v2 # https://github.com/ffurrer2/extract-release-notes

      - name: 📋 Create Draft Release
        # https://cli.github.com/manual/gh_release_create
        env:
          RELEASE_NOTES: ${{ steps.extract-release-notes.outputs.release_notes }}
        run: |
          gh release create $TAG --title "Release $TAG" --notes "$RELEASE_NOTES" --draft

      - name: 📦 Create Github Release
        # https://cli.github.com/manual/gh_release_upload
        run: |
          gh release upload $TAG *.zip
