#
# .github/workflows/build.yml
#
# Copyright 2022 Jens A. Koch.
# SPDX-License-Identifier: MIT
# This file is part of jakoch/wikifolio_universe_converter.
#

name: Build

on: 
 - push
 - pull_request
 # You can manually run this workflow.
 - workflow_dispatch

jobs:

  build-on-windows:

    name: ${{ matrix.config.job_name }}

    # https://github.com/actions/virtual-environments#available-environments
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md
    runs-on: ${{ matrix.config.OS }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: windows-2019, compiler: "VC16", vcpkg_target_triplet: x64-windows-static, build_type: Release, job_name: "Windows | VC16 | static | Release"}
          - { os: windows-2022, compiler: "VC17", vcpkg_target_triplet: x64-windows-static, build_type: Release, job_name: "Windows | VC17 | static | Release"}
          - { os: windows-2022, compiler: "VC17", vcpkg_target_triplet: x64-windows-static, build_type: RelWithDebInfo, job_name: "Windows | VC17 | static | RelWithDebInfo"}

    env:
      PLATFORM: x64
      VCPKG_ROOT: C:\vcpkg
      BUILD_SHARED_LIBS: OFF

    defaults:
      run:
        shell: cmd

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v3 # https://github.com/actions/checkout

      - name: ℹ Show Tool Versions
        run: |
          date /T
          time /T
          curl -V
          cmake --version
          vcpkg version
          echo NUMBER_OF_PROCESSORS=%NUMBER_OF_PROCESSORS%

      # Build Artifact Name: wiuc-1.0.1-0cda6a2-VC17-x64-static-Release
      - name: ✏ Fetch Versioning Data & Set Artifact Name
        shell: pwsh
        run: |
          $NAME="wiuc"
          $VERSION=$(jq -r .version vcpkg.json)
          $SHORT_HASH=$($env:GITHUB_SHA.substring(0,7))
          $COMPILER="${{ matrix.config.compiler }}"
          $TRIPLET="${{ matrix.config.vcpkg_target_triplet }}"
          $BUILD_TYPE="${{ matrix.config.build_type }}"
          $ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-$COMPILER-$TRIPLET-$BUILD_TYPE"
          echo "Artifact Name:" $ARTIFACT_NAME
          echo "ARTIFACT_NAME=$($ARTIFACT_NAME)" >> $env:GITHUB_ENV
          echo "VERSION=$($VERSION)" >> $env:GITHUB_ENV

      - name: 📥 Setup VC16 Environment (➔ vcvarsall)
        if: matrix.config.compiler == 'VC16'
        run: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM%

      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2022-Readme.md#visual-studio-enterprise-2022
      - name: 📥 Setup VC17 Environment (→ vcvars64)
        if: matrix.config.compiler == 'VC17'
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

      - name: 🔽 Update VCPKG
        run: |
          cd ${{ env.VCPKG_ROOT }}
          git reset --hard
          git pull --quiet
          bootstrap-vcpkg.bat -disableMetrics
          vcpkg version

      #- name: 🔽 Integrate VCPKG
      #  run: vcpkg integrate install --triplet=${{ matrix.config.VCPKG_TARGET_TRIPLET }} --feature-flags=manifests

      - name: 🎯 Cache VCPKG
        id: cache-vcpkg
        uses: actions/cache@v3 # https://github.com/actions/cache
        with:
          # https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md#configuration
          path: ~\AppData\Local\vcpkg\archives\
          key: cache-vcpkg-${{ matrix.config.compiler }}-${{ matrix.config.vcpkg_target_triplet }}-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            cache-vcpkg-${{ matrix.config.compiler }}-${{ matrix.config.vcpkg_target_triplet }}-${{ github.ref }}
            cache-vcpkg-${{ matrix.config.compiler }}-${{ matrix.config.vcpkg_target_triplet }}

      - name: ✏ CMake ➔ Configure (including VCPKG → Install Dependencies)
        run: |
          if "${{ matrix.config.compiler }}" == "VC16"; set "GENERATOR=Visual Studio 16 2019"
          if "${{ matrix.config.compiler }}" == "VC17"; set "GENERATOR=Visual Studio 17 2022"
          echo %GENERATOR%
          mkdir build && cd build
          cmake -G "%GENERATOR%" -A x64 ..                                                     ^
                -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}                             ^
                -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake  ^
                -DVCPKG_TARGET_TRIPLET=${{ matrix.config.vcpkg_target_triplet }}               ^
                -DBUILD_SHARED_LIBS=${{ env.BUILD_SHARED_LIBS }}                               ^
                -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: 🙏 CMake ➔ Build
        run: cmake --build build --config ${{ matrix.config.build_type }} -j %NUMBER_OF_PROCESSORS%

      - name: 📦 CMake ➔ Install
        run: cmake --install build --config ${{ matrix.config.build_type }} --prefix build/wiuc-%VERSION% --verbose

      - name: ❔ CHECK important folders, to see if everything is present (after building)
        run: |
          dir build
          dir /S /B build\vcpkg_installed\${{ matrix.config.vcpkg_target_triplet }}
          dir /S /B build\${{ matrix.config.build_type }}

      - name: 🚥 Prepare Build Artifact (copy to packaging folder and rename)
        run: |
          mkdir artifact
          copy build\${{ matrix.config.build_type }}\wiuc.exe artifact\

      - name: 🔼 Upload Build Artifact (on commit)
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact/**/*

      - name: 📦 Create Github Release (on tag)
        uses: softprops/action-gh-release@v1 # https://github.com/softprops/action-gh-release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifact/**/*

# ---------------------------------------------------------------------------------------

  build-on-linux:

# ---------------------------------------------------------------------------------------

    name: ${{ matrix.config.job_name }}

    # https://github.com/actions/virtual-environments#available-environments
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2204-Readme.md
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: ubuntu-20.04, compiler: "GCC-9",    vcpkg_target_triplet: x64-linux, build_type: Release, apt_packages: "g++-9",    cc: "gcc-9",    cxx: "g++-9",      job_name: "Linux | GCC-9 | Release"}
        - { os: ubuntu-22.04, compiler: "GCC-11",   vcpkg_target_triplet: x64-linux, build_type: Release, apt_packages: "g++-11",   cc: "gcc-11",   cxx: "g++-11",     job_name: "Linux | GCC-11 | Release"}
        - { os: ubuntu-20.04, compiler: "Clang-10", vcpkg_target_triplet: x64-linux, build_type: Release, apt_packages: "clang-10", cc: "clang-10", cxx: "clang++-10", job_name: "Linux | Clang-10 | Release"}
        - { os: ubuntu-22.04, compiler: "Clang-14", vcpkg_target_triplet: x64-linux, build_type: Release, apt_packages: "clang-14", cc: "clang-14", cxx: "clang++-14", job_name: "Linux | Clang-14 | Release"}

    env:
      VCPKG_ROOT: /usr/local/share/vcpkg
      BUILD_SHARED_LIBS: ON

    steps:
      - name: 🤘 Checkout Code
        uses: actions/checkout@v3 # https://github.com/actions/checkout

      # Build Artifact Name: wiuc-1.0.1-0cda6a2-Clang12-x64-linux-Release
      - name: ✏ Fetch Versioning Data & Set Artifact Name
        run: |
          NAME='wiuc'
          VERSION=$(jq -r .version vcpkg.json)
          SHORT_HASH=`echo $GITHUB_SHA | cut -c1-8`
          COMPILER=`echo ${{ matrix.config.compiler }} | sed 's/-//'`
          TRIPLET="${{ matrix.config.vcpkg_target_triplet }}"
          BUILD_TYPE="${{ matrix.config.build_type }}"
          ARTIFACT_NAME="$NAME-$VERSION-$SHORT_HASH-$COMPILER-$TRIPLET-$BUILD_TYPE"
          echo "Artifact Name: $ARTIFACT_NAME"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: 🔽 Update Build Environment (update/install packages)
        run: |
          sudo apt update -qq
          sudo apt install ${{ matrix.config.apt_packages }} -y

      - name: 🔽 Update VCPKG
        run: |
          cd ${{ env.VCPKG_ROOT }}
          git reset --hard
          git pull --quiet
          ./bootstrap-vcpkg.sh -disableMetrics
          vcpkg version

      #- name: 🔽 Integrate VCPKG
      #  run: vcpkg integrate install --triplet=${{ matrix.config.vcpkg_target_triplet }} --feature-flags=manifests

      - name: 🎯 Cache VCPKG
        id: cache-vcpkg
        uses: actions/cache@v3 # https://github.com/actions/cache
        with:
          # https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md#configuration
          path: /home/runner/.cache/vcpkg/archives/
          key: cache-vcpkg-${{ matrix.config.compiler }}-${{ matrix.config.vcpkg_target_triplet }}-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            cache-vcpkg-${{ matrix.config.compiler }}-${{ matrix.config.vcpkg_target_triplet }}-${{ github.ref }}
            cache-vcpkg-${{ matrix.config.compiler }}-${{ matrix.config.vcpkg_target_triplet }}

      - name: ✏ CMake ➔ Configure (including VCPKG → Install Dependencies)
        run: |
          cmake -S ${{ github.workspace }} -B ../build                                         \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}                                    \
                -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake  \
                -DVCPKG_TARGET_TRIPLET=${{ matrix.config.vcpkg_target_triplet }}               \
                -DBUILD_SHARED_LIBS=${{ env.BUILD_SHARED_LIBS }}                               \
                -DCMAKE_VERBOSE_MAKEFILE=ON
        env:
          CC: ${{matrix.config.cc}}
          CXX: ${{matrix.config.cxx}}

      - name: 🙏 CMake → Build
        run: |
          cd ../build
          cmake --build . --config ${{ matrix.config.build_type }}

      - name: 🚥 Prepare Build Artifact (copy to packaging folder)
        run: |
          mkdir artifact
          cp ../build/wiuc artifact/

      #
      # The uploaded artifact will be a zip file named, e.g. "wiuc-1.0.3-2399e873-Clang14-x64-linux-Release".
      # The binary inside the zip is named "wiuc".
      #
      - name: 🔼 Upload Build Artifact (on every commit)
        uses: actions/upload-artifact@v3 # https://github.com/actions/upload-artifact
        if: always()
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifact/**/*

      - name: 📦 Create Github Release (only on tag)
        uses: softprops/action-gh-release@v1 # https://github.com/softprops/action-gh-release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifact/**/*
